# Calculate the nth Fibonacci number efficiently
def fibo(n):
    dp = [0] * (n+1)
    dp[1] = 1

    for i in range(2, n+1):
        dp[i] = dp[i-1] + dp[i-2]
    return dp

n = 15
print("Fibonacci Series till",n,"is as follows:")
print(fibo(n))

"--------------------------------------------------------------------------------------------------"

#Create a one-dimensional NumPy array.
import numpy as np
arr = np.arange(1, 11)
print(arr)

"--------------------------------------------------------------------------------------------------"

#Regular Expression (Regex) Pattern Matching.
import re
def find_valid_emails(text):
    pattern = r'[a-zA-Z0-9._%+-]+@example\.com'
    emails = re.findall(pattern, text)
    return emails
emails = """
john@example.com, jane_doe@example.in, alice@example.com,
bob.smith@example.in, carol@example.com, dave@domain.com
"""
valid_emails = find_valid_emails(emails)
for email in valid_emails:
    print(email)

"--------------------------------------------------------------------------------------------------"

#Longest common subsequence between two sequences.
from functools import lru_cache

def lcs(seq1, seq2):
    @lru_cache(None)
    def dp(i, j):
        if i == 0 or j == 0:
            return ""

        if seq1[i - 1] == seq2[j - 1]:
            return dp(i - 1, j - 1) + seq1[i - 1]

        else:
            lcs1 = dp(i - 1, j)
            lcs2 = dp(i, j - 1)
            return lcs1 if len(lcs1) > len(lcs2) else lcs2

    n, m = len(seq1), len(seq2)
    return dp(n, m)

seq1 = "DEMMMO"
seq2 = "DEMMMOS"
result = lcs(seq1, seq2)
print(result)

"--------------------------------------------------------------------------------------------------"

#Configurable Payment Processing System Using Strategy Pattern
class PaymentStrategy:
    def pay_amount(self, amount):
        pass


class creditcard(PaymentStrategy):
    def __init__(self, card_number):
        self.card_number = card_number

    def pay_amount(self, amount):
        print("Processing credit card payment of $" + str(amount) + " using card " + str(self.card_number))


class PayPal(PaymentStrategy):
    def __init__(self, email):
        self.email = email

    def pay_amount(self, amount):
        print("Processing PayPal payment of $" + str(amount) + " using email " + str(self.email))


class bitcoin(PaymentStrategy):
    def __init__(self, wallet_address):
        self.wallet_address = wallet_address

    def pay_amount(self, amount):
        print("Processing Bitcoin payment of $" + str(amount) + " using wallet " + str(self.wallet_address))


class Handler:
    def __init__(self, payment_method: PaymentStrategy):
        self.payment_method = payment_method

    def update_payment_method(self, payment_method: PaymentStrategy):
        self.payment_method = payment_method

    def handle_payment(self, amount):
        self.payment_method.pay_amount(amount)


usercreditcard = creditcard("1234-5678-9876-5432")
userpaypal = PayPal("user@example.com")
userbitcoin = bitcoin("1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa")

user = Handler(usercreditcard)
user.handle_payment(100)

user.update_payment_method(userpaypal)
user.handle_payment(100)

user.update_payment_method(userbitcoin)
user.handle_payment(100)

"--------------------------------------------------------------------------------------------------"

#Implement a Python program that creates multiple threads to perform different tasks concurrently.
import time
import random
import math
import threading

def downloadingdata(file_id):
    print("Starting download for file " + str(file_id) + "...")
    time.sleep(random.uniform(1, 3))
    print("Download completed for file " + str(file_id) + ".")
    time.sleep(1)

def facto(number):
    print("Starting factorial calculation for " + str(number) + "...")
    factorial = math.factorial(number)
    print("Factorial of " + str(number) + " is " + str(factorial) + ".")
    time.sleep(1)

# Create threads for downloading files
file_threads = []
for file_id in range(1, 4):
    thread = threading.Thread(target=downloadingdata, args=(file_id,))
    file_threads.append(thread)
    thread.start()

# Create threads for calculating factorials
factorial_threads = []
numbers = [5, 7, 10]
for number in numbers:
    thread = threading.Thread(target=facto, args=(number,))
    factorial_threads.append(thread)
    thread.start()

# Wait for all threads to complete
for thread in file_threads + factorial_threads:
    thread.join()

print("All tasks completed.")

"--------------------------------------------------------------------------------------------------"

#Dynamic Report Generator 1.
class Report:
    def __init__(self, title, content):
        self.title = title
        self.content = content
        self.formatted_content = content

    def __str__(self):
        return f"Title: {self.title}\n\n{self.formatted_content}"

    def __call__(self, formatter):
        self.formatted_content = formatter(self.content)
        return self

    @classmethod
    def create_template(cls, template_name):
        if template_name == "simple":
            return cls("Simple Report", "This is a Program of experiment 2 of APP")
        elif template_name == "detailed":
            return cls("Detailed Report", "This is a detailed report with more sections.")
        else:
            return cls("Custom Report", "Custom report content.")

    def apply_formatting(self, formatting_func):
        self.formatted_content = formatting_func(self.content)

def bold_format(content):
    return f"**{content}**"

def italic_format(content):
    return f"*{content}*"

report = Report("APP Experiment Report", "This is the content of the APP experiment report.")
print(report)

formatted_report = report(bold_format)
print(formatted_report)

template_report = Report.create_template("simple")
template_report.apply_formatting(italic_format)
print(template_report)

"--------------------------------------------------------------------------------------------------"

#Dynamic Report Generator 2
class ReportGenerator:
    def __init__(self, data):
        self.data = data

    def generate_report(self, columns):
        report = {}
        for column in columns:
            total = sum(float(row[column]) for row in self.data)
            count = len(self.data)
            average = total / count if count else 0
            report[column] = {"Total": total, "Average": average, "Count": count}
        return report


# Example Data
data = [
    {"CustomerID": 1, "TotalAmount": 150, "MenuItems": 3},
    {"CustomerID": 2, "TotalAmount": 200, "MenuItems": 5},
    {"CustomerID": 3, "TotalAmount": 120, "MenuItems": 2},
    {"CustomerID": 4, "TotalAmount": 180, "MenuItems": 4}
]

# Create and print report
report_generator = ReportGenerator(data)
report = report_generator.generate_report(["TotalAmount", "MenuItems"])

for column, stats in report.items():
    print(column + ": " + str(stats))

"--------------------------------------------------------------------------------------------------"

#Library Management
class Book:
    def __init__(self, title):
        self.title = title
        self.is_borrowed = False

class Patron:
    def __init__(self, name):
        self.name = name
        self.borrowed_books = []

class Library:
    def __init__(self):
        self.books = {}
        self.patrons = {}

    def add_book(self, title):
        self.books[title] = Book(title)
        print("Book '" + title + "' added.")

    def register_patron(self, name):
        self.patrons[name] = Patron(name)
        print("Patron '" + name + "' registered.")

    def borrow_book(self, patron_name, book_title):
        patron = self.patrons.get(patron_name)
        book = self.books.get(book_title)
        if patron and book and not book.is_borrowed:
            book.is_borrowed = True
            patron.borrowed_books.append(book)
            print("Book '" + book_title + "' borrowed by '" + patron_name + "'.")
        else:
            print("Cannot borrow book '" + book_title + "'.")

    def return_book(self, patron_name, book_title):
        patron = self.patrons.get(patron_name)
        book = self.books.get(book_title)
        if patron and book and book in patron.borrowed_books:
            book.is_borrowed = False
            patron.borrowed_books.remove(book)
            print("Book '" + book_title + "' returned by '" + patron_name + "'.")
        else:
            print("Cannot return book '" + book_title + "'.")

library = Library()
library.register_patron("IU")
library.register_patron("Aryan")
library.add_book("Ikigai")
library.add_book("Rich Dad Poor Dad")
library.add_book("Think and Grow Rich")
library.add_book("Atomic Habits")
library.register_patron("MayPal")
library.borrow_book("IU", "Atomic Habits")
library.return_book("MayPal", "Rich Dad Poor Dad")
library.return_book("IU", "Atomic Habits")

"--------------------------------------------------------------------------------------------------"

#Decorators with Arguments
def decorator(decorated_function):
    def decoration(*args, **kwargs):
        print("Your program is starting...")
        decorated_function(*args, **kwargs)
        print("Program ended, thank you!...")
    return decoration

@decorator
def add_two_numbers(num1, num2):
    result = num1 + num2
    print("Result is :-", result)

add_two_numbers(10, 20)

"--------------------------------------------------------------------------------------------------"

#Generators
# In this program we will print series of odd and even number using generator

def odd_even_checker(number_range):
    for i in range(1, number_range):
        if i % 2 == 0:
            yield f"{i} is even"
        else:
            yield f"{i} is odd"

data = odd_even_checker(20)

for values in data:
    print(values)

"--------------------------------------------------------------------------------------------------"
